FROM docker.io/rust:1.77.0 as builder1
ARG ARG_THAPO_SKA_ENV_FILE
RUN apt-get update && apt-get full-upgrade -y && apt-get install -y python-is-python3 python3 python3-dev python3-pip rsync && apt-get clean && rm -rf /var/lib/apt/lists/* && \
    pip install poetry --break-system-packages && \
    cargo install --locked just

FROM builder1 as builder2
ARG ARG_THAPO_SKA_ENV_PROFILE
WORKDIR /build
COPY ./justfile /build/justfile
COPY ./rust-toolchain.toml /build/rust-toolchain.toml
COPY ./Cargo.toml /build/Cargo.toml
COPY ./Cargo.lock /build/Cargo.lock
COPY ./ska_backend/Cargo.toml /build/ska_backend/Cargo.toml
COPY ./ska_backend/src /build/ska_backend/src
# COPY ./ska_frontend/Cargo.toml /build/ska_frontend/Cargo.toml
# COPY ./ska_frontend/src/lib.rs /build/ska_frontend/src/lib.rs
COPY ./ska_migration/Cargo.toml /build/ska_migration/Cargo.toml
COPY ./ska_migration/src /build/ska_migration/src
RUN just backend_build

FROM builder1 as builder3
ARG ARG_THAPO_SKA_ENV_PROFILE
WORKDIR /build
COPY ./justfile /build/justfile
COPY ./poetry.lock /build/poetry.lock
COPY ./poetry.toml /build/poetry.toml
COPY ./pyproject.toml /build/pyproject.toml
COPY ./ska_llm /build/ska_llm
RUN touch README.md
RUN just llm_build

FROM builder1 as builder4
ARG ARG_THAPO_SKA_ENV_PROFILE
WORKDIR /build
COPY ./justfile /build/justfile
COPY --from=builder2 /build/target/release/app-server /build/target/release/app-server
COPY --from=builder2 /build/target/release/app-cli /build/target/release/app-cli
COPY --from=builder3 /build/dist/*.whl /build/dist/
COPY ./ska_backend/distribution /build/ska_backend/distribution
ENV THAPO_SKA_ENV_PROFILE=${ARG_THAPO_SKA_ENV_PROFILE}
RUN just backend_pack
ENV NLTK_DATA="/build/dist/ska_backend/share/nltk_data"
ENV PYTHONPATH="/build/dist/ska_backend/share/thapo_ska_py"
RUN mkdir -p ${NLTK_DATA} && python -m nltk.downloader popular punkt


FROM docker.io/debian:bookworm-20231120 as runner
ARG ARG_THAPO_SKA_ENV_PROFILE
RUN apt-get update && apt-get install --no-install-recommends -y libssl3 python3 python-is-python3 libgl1-mesa-glx libopencv-dev poppler-utils tesseract-ocr && apt-get clean && rm -rf /var/lib/apt/lists/* && \
    useradd -m -u 14000 -U thaposka && \
    mkdir -p /home/thaposka/.config/ska/${ARG_THAPO_SKA_ENV_PROFILE} && \
    chown -R thaposka:thaposka /home/thaposka/.config/ska/${ARG_THAPO_SKA_ENV_PROFILE}
WORKDIR /app
ENV NLTK_DATA="/app/share/nltk_data"
ENV PYTHONPATH="/app/share/thapo_ska_py"
COPY --from=builder4 /build/dist/ska_backend /app
USER thaposka
CMD ./bin/app-server.sh
